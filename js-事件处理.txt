DOM0级事件处理程序
var btn = document.getElementById("myBtn");
btn.onclick = function(){
	alert("Clicked");
};
btn.onclick = null;//删除事件处理程序
-------------------------------------------
DOM2级事件处理程序
this==当前引用元素
btn.addEventListener("click",function(){
	alert(this.id);
},false);//最后一个参数ture(表示在捕获阶段调用事件处理事件程序);false(在冒泡阶段调用事件处理程序)
通过addEventListener()添加的匿名函数无法移除
解决：
var handler = function(){
	alert(this.id);
};
btn.addEventListener("click",handler,false);
btn.removeEventListener("click",handler,false);
//最好将事件处理程序添加到事件流的冒泡阶段
IE：
attachEvent()  detachEvent()   两个参数   只支持冒泡  this==window

----------------------------------
跨浏览器的事件处理程序
var EventUtil = {
	addHandler: function(element,type,handler){
		if(element.addEventListener){
			element.addEventListener(type, handler, false);
		} else if(element.attachEvent){
			element.attachEvent("on" + type,handler);
		} else{
			element["on" + type] = handler;
		}
	},
	removeHandler: function(element,type,handler){
		if(element.removeEventListener){
			element.removeEventListener(type,handler,false);
		} else if(element.detachEvent){
			element.detachEvent("on" + type, handler);
		} else {
			element["on" + type] = null;
		}
	}
};
-------------------------------------------------------------
在触发DOM上的某个事件时，会产生一个事件对象event，
这个对象中包含着所有与事件有关的信息。
包括导致事件的元素、事件的类型、以及其他与特定事件相关的信息

无论指定事件处理程序时使用什么方法（dom0或dom2），都会传入event对象
btn.onclick = function(event){
	alert(event.type);//click
};
btn.addEventListener("click", function(event){
	alert(event.type);//click
},false);
event对象的部分属性和方法：
bubble  :  事件是否冒泡
cancelable : 是否可以取消事件的默认行为
currentTarget : 其事件处理程序当前正在处理事件的那个元素
eventPhase:调用事件处理程序的阶段：1捕获 2处于 3冒泡
p355
---------------------------------------------
跨浏览器的事件对象
var EventUtil = {
	getEvent: function(event){  //事件对象
		return event ? event : window.event;
	},
	getTarget: function(event){ //事件目标
		return event.target || event.srcElement;
	},
	preventDefault: function(event){
		if(event.preventDefault){
			event.preventDefault();
		}else{
			event.returnValue = false;
		}
	},
	stopPropagation: function(event){ //取消事件冒泡
		if(event.stopPropagation){
			event.stopPropagation();
		} else {
			event.cancelBubble = true;
		}
	}
};
-----------------------------
事件委托
对“事件处理程序过多”问题的解决方案就是事件委托。利用了事件冒泡。
适合事件委托的事件：click、mousedown mouseup keydown keyup keypress
eg.
<ul id="myLinks">
	<li id="goSomewhere">go somewhere</li>
	<li id="doSomething">do something</li>
	<li id="sayHi">say hi</li>
</ul>
var list = document.getElementById("myLinks");
EventUtil.addHandler(list, "click" ,function(event){
	event = EventUtil.getEvent(event);
	var target = EventUtil.getTarget(event);
	switch(target.id){
		case "doSomething":
			document.title = "I";
			break;
		case "goSomewhere":
			location.href = "http://www.greenydo.com";
			break;
		case "sayHi":
			alert("hi");
			break;
	}
});
-----------------------------
模拟事件
测试web应用程序、模拟触发事件是一种极其有用的技术
eg.
var btn = document.getElementById("myBtn")；
var event = document.createEvent("MouseEvents");//创建事件对象
even.initMouseEvent("click",true,true,document.defaultView,0,0,0,0,0,false,false,false,false,0,null);
//初始化
btn.dispatchEvent(event);//触发事件