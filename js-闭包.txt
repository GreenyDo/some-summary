闭包就是能够读取其他函数内部变量的函数
eg.
function f1(){
	var n=999;
	function f2(){
		alert(n);
	}

	return f2;
}
var result=f1();
result(); //999
函数f2()就是闭包。
定义在一个函数内部的函数。
将函数内部和函数外部连接起来的桥梁。
-----------------------------------
闭包的用途
1.可以读取函数内部的变量
2.让这些变量的值始终保持在内存中
eg.
function f1(){
	var n=999;
	nAdd = function(){
		n+=1;
	}
	function f2(){
		alert(n);
	}
	return f2;
}

var result = f1();
result();//999
nAdd();
result(); //1000
----------------------------------
注意点：
1.闭包会使得函数中的变量都被保存在内存中，内存消耗很大，
所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能会导致内存泄漏。
解决方法：在退出函数之前，将不使用的局部变量全部删除。
2.闭包会在父函数外部，改变父函数内部变量的值。
----------------------------------
思考题：
1.
var name = "The Window";
　　var object = {
　　　　name : "My Object",
　　　　getNameFunc : function(){
　　　　　　return function(){
　　　　　　　　return this.name;
　　　　　　};
　　　　}
　　};
　　alert(object.getNameFunc()());//The Window
----------------------------------
var name = "The Window";
　　var object = {
　　　　name : "My Object",
　　　　getNameFunc : function(){
　　　　　　var that = this;
　　　　　　return function(){
　　　　　　　　return that.name;
　　　　　　};
　　　　}
　　};
　　alert(object.getNameFunc()());//My Object
//1 函数中的this指的是调用这个函数的owner
//2 object.getNameFunc()是返回一个函数，并没有执行函数中的代码